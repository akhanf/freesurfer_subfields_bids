#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids

configfile: 'config/snakebids.yml'

sbi = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)

hemi_lookup={'L': 'lh','R': 'rh'}


#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config['pybids_inputs'])

#---- end snakebids boilerplate ------------------------------------------------
rule all:
    input:
        out_dir=expand(
                bids(root='freesurfer',include_subject_dir=False,**sbi.subj_wildcards),
                subject=sbi.subjects,
                session=sbi.sessions)

def get_T1w(wildcards):
    
    #get the list of scans for the subject
    scans_zip_list = snakebids.filter_list(sbi.input_zip_lists['T1w'], wildcards)

    #return all the T1w scans
    return expand(sbi.input_path['T1w'],zip,**scans_zip_list)
 
def get_T2w(wildcards):
    
    #get the list of scans for the subject
    scans_zip_list = snakebids.filter_list(sbi.input_zip_lists['T2w'], wildcards)

    #return the first T2w scan for the subject
    return expand(sbi.input_path['T2w'],zip,**scans_zip_list)[0]

    
rule freesurfer_subj:
    input:
        t1w = get_T1w
    params:
        in_args = lambda wildcards, input: ' '.join( f'-i {img}' for img in input.t1w ),
        subjects_dir = 'freesurfer'
    output:
        directory(bids(root='freesurfer',include_subject_dir=False,**sbi.subj_wildcards))
    threads: 8
    resources: 
        mem_mb=32000,
        time=1440
    shadow: 'minimal'
    container: config['singularity']['freesurfer']
    log: bids(root='logs',suffix='reconall.txt',**sbi.subj_wildcards)
    shell: 
        'recon-all -threads {threads} -sd {resources.tmpdir} {params.in_args} '
        '-subjid sub-{wildcards.subject} -parallel -hires -all && '
        'cp -Rv {resources.tmpdir}/sub-{wildcards.subject} {output}'
        
rule subfields_subj:
    input:
        fs_dir=bids(root='freesurfer',include_subject_dir=False,**sbi.subj_wildcards),
        t2w=get_T2w,
        mcr_tar=config['mcr_tar']
    params
        container=config['singularity']['freesurfer'],
    output:
        touch(bids(root='done',include_subject_dir=False,**sbi.subj_wildcards))
    shell:
        'tar -C {resources.tmpdir} -xvf {input.mcr_tar} && '
        '{singularity exec -B {resources.tmpdir}/MCRv84:/usr/local/freesurfer/MCRv84 '
        '{params.container} segmentHA_T2.sh {wildcards.subject} {input.t2w} T2 0'

